// Code generated by protoc-gen-go. DO NOT EDIT.
// source: question.proto

/*
Package question is a generated protocol buffer package.

It is generated from these files:
	question.proto

It has these top-level messages:
	Question
	QuestionList
	Filter
	IdRequest
	Void
*/
package question

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Question struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Text     string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	IsGood   bool   `protobuf:"varint,3,opt,name=isGood" json:"isGood,omitempty"`
	IsActive bool   `protobuf:"varint,4,opt,name=isActive" json:"isActive,omitempty"`
}

func (m *Question) Reset()                    { *m = Question{} }
func (m *Question) String() string            { return proto.CompactTextString(m) }
func (*Question) ProtoMessage()               {}
func (*Question) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Question) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Question) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Question) GetIsGood() bool {
	if m != nil {
		return m.IsGood
	}
	return false
}

func (m *Question) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type QuestionList struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *QuestionList) Reset()                    { *m = QuestionList{} }
func (m *QuestionList) String() string            { return proto.CompactTextString(m) }
func (*QuestionList) ProtoMessage()               {}
func (*QuestionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QuestionList) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type Filter struct {
	IsActive  bool     `protobuf:"varint,1,opt,name=isActive" json:"isActive,omitempty"`
	Limit     int32    `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset    int32    `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	IgnoreIds []uint64 `protobuf:"varint,4,rep,packed,name=ignoreIds" json:"ignoreIds,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Filter) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Filter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Filter) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Filter) GetIgnoreIds() []uint64 {
	if m != nil {
		return m.IgnoreIds
	}
	return nil
}

type IdRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *IdRequest) Reset()                    { *m = IdRequest{} }
func (m *IdRequest) String() string            { return proto.CompactTextString(m) }
func (*IdRequest) ProtoMessage()               {}
func (*IdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IdRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Question)(nil), "question.Question")
	proto.RegisterType((*QuestionList)(nil), "question.QuestionList")
	proto.RegisterType((*Filter)(nil), "question.Filter")
	proto.RegisterType((*IdRequest)(nil), "question.IdRequest")
	proto.RegisterType((*Void)(nil), "question.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Questions service

type QuestionsClient interface {
	List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*QuestionList, error)
	Put(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Question, error)
	Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Question, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Void, error)
}

type questionsClient struct {
	cc *grpc.ClientConn
}

func NewQuestionsClient(cc *grpc.ClientConn) QuestionsClient {
	return &questionsClient{cc}
}

func (c *questionsClient) List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*QuestionList, error) {
	out := new(QuestionList)
	err := grpc.Invoke(ctx, "/question.Questions/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) Put(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := grpc.Invoke(ctx, "/question.Questions/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := grpc.Invoke(ctx, "/question.Questions/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/question.Questions/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Questions service

type QuestionsServer interface {
	List(context.Context, *Filter) (*QuestionList, error)
	Put(context.Context, *Question) (*Question, error)
	Get(context.Context, *IdRequest) (*Question, error)
	Delete(context.Context, *IdRequest) (*Void, error)
}

func RegisterQuestionsServer(s *grpc.Server, srv QuestionsServer) {
	s.RegisterService(&_Questions_serviceDesc, srv)
}

func _Questions_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.Questions/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).List(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Question)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.Questions/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).Put(ctx, req.(*Question))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.Questions/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).Get(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.Questions/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Questions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "question.Questions",
	HandlerType: (*QuestionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Questions_List_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Questions_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Questions_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Questions_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question.proto",
}

func init() { proto.RegisterFile("question.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x4a, 0x3b, 0x31,
	0x14, 0xc5, 0x9b, 0x4e, 0x3a, 0xcc, 0xdc, 0xff, 0x9f, 0x22, 0x57, 0x29, 0xa1, 0xba, 0x18, 0xb2,
	0x9a, 0x55, 0x5b, 0xea, 0x0b, 0x28, 0x88, 0xa5, 0xe0, 0x42, 0xb3, 0xf0, 0x01, 0x6a, 0x52, 0xb9,
	0x50, 0x9b, 0x3a, 0x49, 0xc5, 0xf7, 0xf4, 0x85, 0x64, 0x32, 0x5f, 0x54, 0xc7, 0xdd, 0x3d, 0xf7,
	0x83, 0xf3, 0x3b, 0x21, 0x30, 0x7e, 0x3f, 0x1a, 0xe7, 0xc9, 0xee, 0x67, 0x87, 0xc2, 0x7a, 0x8b,
	0x49, 0xa3, 0xe5, 0x06, 0x92, 0xa7, 0xba, 0xc6, 0x31, 0x0c, 0x49, 0x0b, 0x96, 0xb1, 0x9c, 0xab,
	0x21, 0x69, 0x44, 0xe0, 0xde, 0x7c, 0x7a, 0x31, 0xcc, 0x58, 0x9e, 0xaa, 0x50, 0xe3, 0x04, 0x62,
	0x72, 0x2b, 0x6b, 0xb5, 0x88, 0x32, 0x96, 0x27, 0xaa, 0x56, 0x38, 0x85, 0x84, 0xdc, 0xed, 0x8b,
	0xa7, 0x0f, 0x23, 0x78, 0x98, 0xb4, 0x5a, 0xde, 0xc0, 0xff, 0xc6, 0xe3, 0x81, 0x9c, 0xc7, 0x05,
	0xa4, 0x8d, 0xbf, 0x13, 0x2c, 0x8b, 0xf2, 0x7f, 0x4b, 0x9c, 0xb5, 0x84, 0xcd, 0xaa, 0xea, 0x96,
	0xe4, 0x01, 0xe2, 0x7b, 0xda, 0x79, 0x53, 0x9c, 0xf8, 0xb0, 0x53, 0x1f, 0xbc, 0x80, 0xd1, 0x8e,
	0xde, 0xa8, 0x02, 0x1e, 0xa9, 0x4a, 0x94, 0xc4, 0x76, 0xbb, 0x75, 0xc6, 0x07, 0xe2, 0x91, 0xaa,
	0x15, 0x5e, 0x41, 0x4a, 0xaf, 0x7b, 0x5b, 0x98, 0xb5, 0x76, 0x82, 0x67, 0x51, 0xce, 0x55, 0xd7,
	0x90, 0x97, 0x90, 0xae, 0xb5, 0x32, 0x01, 0xe1, 0xe7, 0xc3, 0xc8, 0x18, 0xf8, 0xb3, 0x25, 0xbd,
	0xfc, 0x62, 0x90, 0x36, 0xb8, 0x0e, 0x97, 0xc0, 0x43, 0xbc, 0xb3, 0x2e, 0x4b, 0x05, 0x3d, 0x9d,
	0xfc, 0x4e, 0x57, 0x6e, 0xca, 0x01, 0xce, 0x21, 0x7a, 0x3c, 0x7a, 0xec, 0x89, 0x3f, 0xed, 0xe9,
	0xc9, 0x01, 0x2e, 0x20, 0x5a, 0x19, 0x8f, 0xe7, 0xdd, 0xb0, 0xc5, 0xfc, 0xe3, 0x62, 0x0e, 0xf1,
	0x9d, 0xd9, 0x19, 0x6f, 0xfa, 0x8f, 0xc6, 0x5d, 0xb3, 0xcc, 0x24, 0x07, 0x9b, 0x38, 0xfc, 0x91,
	0xeb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0x17, 0x8d, 0x0d, 0x35, 0x02, 0x00, 0x00,
}
